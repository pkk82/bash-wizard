# mci - mvn clean install
alias mci='mvn clean install'

# mcv - mvn clean verify
alias mcv='mvn clean verify'

# mcp - mvn clean package
alias mcp='mvn clean package'

# mcc - mvn clean compile
alias mcc='mvn clean compile'

# mctc - mvn clean test-compile
alias mctc='mvn clean test-compile'

# mct - mvn clean test
alias mct='mvn clean test'

# mcist - mvn clean install -DskipTests
alias mcist='mvn clean install -DskipTests -DskipUnitTests -DskipIntegrationTests'

# mcpst - mvn clean package -DskipTests
alias mcpst='mvn clean package -DskipTests -DskipUnitTests -DskipIntegrationTests'

# mi - mvn install
alias mi='mvn install'

# mve - mvn verify
alias mve='mvn verify'

# mp - mvn package
alias mp='mvn package'

# mc - mvn compile
alias mc='mvn compile'

# mtc - mvn test-compile
alias mtc='mvn test-compile'

# mt - mvn test
alias mt='mvn test'

# mist - mvn install -DskipTests
alias mist='mvn install -DskipTests -DskipUnitTests -DskipIntegrationTests'

# mpst - mvn package -DskipTests
alias mpst='mvn package -DskipTests -DskipUnitTests -DskipIntegrationTests'

# msbr - mvn spring-boot:run'
alias msbr='mvn spring-boot:run'

# msbtr - mvn spring-boot:test-run'
alias msbtr='mvn spring-boot:test-run'

# mw <version> - mvn wrapper:wrapper -Dmaven=<version>
function mw() {
  if [[ "$1" == "" ]]; then
    mvn wrapper:wrapper
  else
    mvn wrapper:wrapper -Dmaven="$1"
  fi
}

# mej - launch compiled class using maven exec plugin, pass term matching main class as first argument and arguments to main class as subsequent ones
function mej() {
  local term

  if [[ "$1" == "" ]]; then
    echo "Use: mej <main class term> <arguments>"
    return 1
  fi

  term="${1//./_}"
  classFiles=()
  while IFS="" read -r line; do classFiles+=("$line"); done < <(find . -type f -name "$term*.class")
  if [[ "${#classFiles[@]}" == "0" ]]; then
    while IFS="" read -r line; do classFiles+=("$line"); done < <(find . -type f -name "_$term*.class")
  fi
  if [[ "${#classFiles[@]}" == "0" ]]; then
    while IFS="" read -r line; do classFiles+=("$line"); done < <(find . -type f -name "*$term*.class")
  fi
  if [[ "${#classFiles[@]}" == "0" ]]; then
    echo "Classes not found - did you compile your project?"
    return 1
  fi
  for classFile in "${classFiles[@]}"; do
    className=$(echo "$classFile" | sed 's/.*\/target\/classes\///g' | sed 's/\.class//g' | sed 's/\//\./g')
    pathToPom=$(echo "$classFile" | sed 's/\/target\/classes\/.*//g')
    if ! result=$(jim "$classFile"); then
      echo "$result"
      break
    fi
    if [[ "$result" == "There is no main method in"* ]]; then
      continue
    fi
    echo ""
    echo "Launching $className"
    echo ""
    mvn --quiet exec:java -Dexec.mainClass="$className" -Dexec.args="${*:2}" -f "$pathToPom/pom.xml"
    break
  done
}

# meja - launch all compiled class using maven exec plugin, pass term matching main class as first argument and arguments to main class as subsequent ones
function meja() {
  local term

  if [[ "$1" == "" ]]; then
    echo "Use: meja <main class term> <arguments>"
    return 1
  fi

  term="${1//./_}"
  classFiles=()
  while IFS="" read -r line; do classFiles+=("$line"); done < <(find . -type f -name "*$term*.class")
  if [[ "${#classFiles[@]}" == "0" ]]; then
    echo "Classes not found - did you compile your project?"
    return 1
  fi
  for classFile in "${classFiles[@]}"; do
    className=$(echo "$classFile" | sed 's/.*\/target\/classes\///g' | sed 's/\.class//g' | sed 's/\//\./g')
    pathToPom=$(echo "$classFile" | sed 's/\/target\/classes\/.*//g')
    if ! result=$(jim "$classFile"); then
      echo "$result"
      break
    fi
    if [[ "$result" == "There is no main method in"* ]]; then
      continue
    fi
    echo ""
    echo "Launching $className"
    echo ""
    mvn --quiet exec:java -Dexec.mainClass="$className" -Dexec.args="${*:2}" -f "$pathToPom/pom.xml"
  done
}

# mejaa - launch all compiled class using maven exec plugin, pass arguments to main classes as subsequent ones
function mejaa() {
  classFiles=()
  while IFS="" read -r line; do classFiles+=("$line"); done < <(find . -type f -name "*$term*.class")
  if [[ "${#classFiles[@]}" == "0" ]]; then
    echo "Classes not found - did you compile your project?"
    return 1
  fi
  for classFile in "${classFiles[@]}"; do
    if ! result=$(jim "$classFile"); then
      echo "$result"
      break
    fi
    if [[ "$result" == "There is no main method in"* ]]; then
      continue
    fi
    className=$(echo "$classFile" | sed 's/.*\/target\/classes\///g' | sed 's/\.class//g' | sed 's/\//\./g')
    pathToPom=$(echo "$classFile" | sed 's/\/target\/classes\/.*//g')
    echo ""
    echo "Launching $className"
    echo ""
    mvn --quiet exec:java -Dexec.mainClass="$className" -Dexec.args="${*:2}" -f "$pathToPom/pom.xml"
  done
}

# mvdpu - mvn versions:display-plugin-updates
alias mvdpu='mvn versions:display-plugin-updates'

# mvn-latest-plugin-version <plugin> - display latest (non beta) version of maven plugin
function mvn-latest-plugin-version() {
    local plugin
    if [[ "$1" == "" ]]; then
      echo "Use: mvn-latest-plugin-version <plugin>"
      return 1
    fi
    plugin="$1"
    set -o pipefail
    if ! curl -f -s "https://repo.maven.apache.org/maven2/org/apache/maven/plugins/$plugin/maven-metadata.xml" | \
      grep '<version>' | \
      sed -E 's/[[:space:]]*<version>([^<]+)<\/version>[[:space:]]*/\1/g' | \
      grep -v beta | \
      tail -n 1
    then
      echo "Invalid plugin"
    fi
    set -o pipefail
}
