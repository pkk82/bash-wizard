# openssl-generate-server-certificate-signed-by-ca <ca-cert> <ca-key> <subject> <alt-names>
function openssl-generate-server-certificate-signed-by-ca() {
  local ca_crt="$1"
  local ca_key="$2"
  local subject="$3"
  local alt_names="$4"

  if [[ "$subject" == "" ]]; then
    echo "Use: openssl-generate-server-certificate-signed-by-ca <ca-cert> <ca-key> <subject> <alt-names>"
    echo "  <ca-cert> - path to CA certificate"
    echo "  <ca-key> - path to CA key"
    echo "  <subject> - subject of the certificate"
    echo "    example: /C=<country>/ST=<state>/L=<location>/O=<organization>/OU=<organization unit>/CN=<common name>"
    echo " <alt-names> - alternative names for the certificate "
    echo "    example: DNS:example.com,DNS:www.example.com,IP:127.0.0.1"
    return 1
  fi

  echo "Generating server key to ./server.key file"
  openssl genrsa -out server.key 4096

  echo "Generating certificate signing request to ./server.csr file"
  openssl req \
    -subj "$subject" \
    -sha256 \
    -new \
    -key server.key \
    -out server.csr

  echo "Generating extfile.cnf file"
  echo extendedKeyUsage = serverAuth > extfile.cnf
  if [[ "$alt_names" != "" ]]; then
    echo subjectAltName = "$alt_names" >> extfile.cnf
  fi

  echo "Generating certificate to ./server.crt file"
  openssl x509 \
    -req \
    -days 365 \
    -sha256 \
    -in server.csr \
    -CA "$ca_crt" \
    -CAkey "$ca_key" \
    -CAcreateserial \
    -extfile extfile.cnf \
    -out server.crt

}

# openssl-display-certificate <certificate>
function openssl-display-certificate() {
  local cert="$1"
  openssl x509 -in "$cert" -text -noout
}
